/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package akylas.location;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.KrollRuntime;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.util.KrollAssetHelper;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.TiProperties;
import org.appcelerator.titanium.util.TiConvert;

import akylas.location.locationmanager.Manager;
import android.content.Context;
import android.location.Location;


@Kroll.module(name="AkylasLocation", id="akylas.location")
public class AkylasLocationModule extends KrollModule
{
    private static KrollDict lastResult;
    private static String scriptUrl;
    private static KrollFunction callback = null;
    private static TiProperties appProperties;
    
    
    @Kroll.constant public static final String APP_PROPERTY_START_ON_BOOT = "akylas.location.startOnBoot";
    @Kroll.constant public static final String APP_PROPERTY_SCRIPT = "akylas.location.script";
    @Kroll.constant public static final String APP_PROPERTY_LAST_LOCATION = "akylas.location.lastLocation";
    @Kroll.constant public static final String PROPERTY_MIN_AGE = "minAge";
    
    private static final String TAG = "AkylasLocationModule";
    
    public static final String PROPERTY_HEADING = "heading";
    public static final String PROPERTY_ALTITUDE = "altitude";
    public static final String PROPERTY_LATITUDE = "latitude";
    public static final String PROPERTY_LONGITUDE = "longitude";
    public static final String PROPERTY_SPEED = "speed";
    public static final String PROPERTY_TIMESTAMP = "timestamp";
    public static final String PROPERTY_CALLBACK = "callback";
    
    public static KrollDict locationToDict(Location location)
    {
        if (location == null) return null;
        KrollDict result = new KrollDict();
        result.put(PROPERTY_LATITUDE, location.getLatitude());
        result.put(PROPERTY_LONGITUDE, location.getLongitude());
        result.put(PROPERTY_ALTITUDE, location.getAltitude());
        result.put(PROPERTY_HEADING, location.getBearing());
        result.put(PROPERTY_SPEED, location.getSpeed());
        result.put(PROPERTY_TIMESTAMP, location.getTime());
        return result;
    }
    
    private static Manager.Listener listener = new Manager.Listener() {
        @Override
        public void onLocation(Location location) {
            Log.d(TAG, "onLocation " + location.toString(), Log.DEBUG_MODE);
            lastResult = locationToDict(location);
            if (appProperties == null) {
                init();
            }
            
            KrollProxy proxy = TiApplication.getInstance().getModuleByName("App");
            if (proxy == null) {
                Log.e(TAG, "cant handle location as no App proxy", Log.DEBUG_MODE);
                return;
            }
            appProperties.setString(APP_PROPERTY_LAST_LOCATION, TiConvert.toString(lastResult));
            if (callback != null) {
                Log.d(TAG, "we have callback", Log.DEBUG_MODE);
                callback.callAsync(proxy.getKrollObject(), lastResult);
            }
            if (scriptUrl != null) {
                Log.d(TAG, "we have scriptUrl", Log.DEBUG_MODE);
                KrollRuntime.getInstance().runModule(KrollAssetHelper.readAsset(scriptUrl), scriptUrl, proxy);
            }
        }
    };
    
    private static void init() {
        if (appProperties == null) {
            final TiApplication app = TiApplication.getInstance();
            Log.d(TAG, "creation", Log.DEBUG_MODE);
            appProperties = app.getAppProperties();
            if (appProperties.hasProperty(APP_PROPERTY_SCRIPT)) {
                scriptUrl = appProperties.getString(APP_PROPERTY_SCRIPT, null);
                if (scriptUrl != null) {
                    if (!scriptUrl.contains("://") && !scriptUrl.startsWith("/")) {
                        scriptUrl = TiC.URL_ANDROID_ASSET_RESOURCES + scriptUrl;
                    }
                    if (scriptUrl.startsWith(TiC.URL_APP_PREFIX)) {
                        scriptUrl = scriptUrl.replaceAll("app:/", "Resources");

                    } else if (scriptUrl.startsWith(TiC.URL_ANDROID_ASSET_RESOURCES)) {
                        scriptUrl = scriptUrl.replaceAll("file:///android_asset/", "");
                    }
                }
            }
        }
    }
    
	public AkylasLocationModule()
	{
	    super();
        Log.d(TAG, "creation", Log.DEBUG_MODE);
        init();
	}
	
	public static Context getAppContext() {
        return TiApplication.getInstance().getApplicationContext();
    }
	
	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
        Log.d(TAG, "onAppCreate", Log.DEBUG_MODE);
	    init();
	}
	
	public static void startLocationTracking() {
        Log.d(TAG, "startLocationTracking", Log.DEBUG_MODE);
        Manager.addListener(listener);
	    Manager.startLocUpdater(getAppContext());
	}
	
	public static void stopLocationTracking() {
        Log.d(TAG, "stopLocationTracking", Log.DEBUG_MODE);
        Manager.removeListener(listener);
        Manager.stopLocUpdater(getAppContext());
    }
    
	
	@Kroll.method
    public void start()
    {
	    startLocationTracking();
    }
	
	@Kroll.method
    public void stop()
    {
	    stopLocationTracking();
    }
	
	@Kroll.method
    @Kroll.getProperty
    public KrollDict getLastLocation()
    {
        return lastResult;
    }

	@Kroll.method
	@Kroll.setProperty
    public void setDistanceFilter(float distanceFilter)
    {
	    Manager.distanceFilter = distanceFilter;
    }

	@Kroll.method
    @Kroll.setProperty
    public void setMinAge(long minAge)
    {
        Manager.minAge = minAge;
    }
	
	@Kroll.method
    @Kroll.setProperty
    public void setCallback(KrollFunction function)
    {
        callback = function;
    }
}

