/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package akylas.messenger;

import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;

// This proxy can be created by calling Messenger.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = MessengerModule.class)
public class MessengerProxy extends KrollProxy {
    // Standard Debugging variables
    private static final String LCAT = "ExampleProxy";
    private static final boolean DBG = TiConfig.LOGD;

    Messenger mService = null;
    boolean mBound;
    final Messenger mMessenger = new Messenger(new IncomingHandler());
    private String mComponentName;

    // Handler for messages comming from AryballeService
    class IncomingHandler extends Handler {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
            default:
                super.handleMessage(msg);
            }
        }
    }

    // Constructor
    public MessengerProxy() {
        super();
    }

    // Handle creation options
    @Override
    public void handleCreationDict(HashMap options) {
        super.handleCreationDict(options);

        if (options.containsKey("message")) {
            Log.d(LCAT,
                    "example created with message: " + options.get("message"));
        }
    }

    /**
     * Class for interacting with the main interface of the service.
     */
    private ServiceConnection mConnection = new ServiceConnection() {
        public void onServiceConnected(ComponentName className,
                IBinder service) {
            // This is called when the connection with the service has been
            // established, giving us the object we can use to
            // interact with the service. We are communicating with the
            // service using a Messenger, so here we get a client-side
            // representation of that from the raw IBinder object.
            mService = new Messenger(service);
            mBound = true;

            // Send to the service the messenger object to use to communicate
            // with the activity
            fireEvent("connected");
        }

        public void onServiceDisconnected(ComponentName className) {
            // This is called when the connection with the service has been
            // unexpectedly disconnected -- that is, its process crashed.
            mService = null;
            mBound = false;
            fireEvent("disconnected");
        }
    };

    // Methods
    @Kroll.method
    public void sendMessage(int type, Object data) {
        Message msg = new Message();
        msg.replyTo = mMessenger;
        msg.what = type;
        msg.obj = data;
        try {
            mService.send(msg);
        } catch (RemoteException e) {
            e.printStackTrace();
            KrollDict errorData = new KrollDict();
            errorData.putCodeAndMessage(-1, e.getLocalizedMessage());
            fireEvent(TiC.EVENT_ERROR, errorData, false, false);
        }
    }

    @Kroll.method
    public void connect(String pkg, String cls) {
        Intent i = new Intent();

        // This need to use the aryballe package name
        // and it need to connect to the service specified in the Aryballe
        // service manifest
        i.setComponent(new ComponentName(pkg, cls));
        Context context = TiApplication.getAppContext();
        if (context.bindService(i, mConnection, Context.BIND_AUTO_CREATE)) {
        } else {
            context.unbindService(mConnection);
        }
    }

    @Kroll.method
    public void disconnect(String pkg, String cls) {
        Context context = TiApplication.getAppContext();
        if (mBound) {
            context.unbindService(mConnection);
        }
    }
}