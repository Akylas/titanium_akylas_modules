/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package akylas.totali;


import java.io.File;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.TiBaseActivity.ConfigurationChangedListener;
import org.appcelerator.titanium.TiContext;
import org.appcelerator.titanium.TiLifecycle.OnLifecycleEvent;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiUIView;

import ti.dfusionmobile.tiComponent;
import android.app.Activity;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.graphics.Color;
import android.view.ViewGroup;
import android.widget.FrameLayout;


// This proxy can be created by calling AkylasScancodeAndroid.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=AkylasTotaliModule.class)
public class ViewProxy extends TiViewProxy implements OnLifecycleEvent, ConfigurationChangedListener
{
	private static final String LCAT = "AkylasTotaliProxy";

	class CommandHandler {
		private String _name;
		public CommandHandler(String name){
			_name = name;
		}
	    void execute(String params[]){
		KrollDict data = new KrollDict();
		data.put("data", params);
    	fireEvent(_name, data);
	    }
	}

		
	private static final String    	THIS_CLASS_SHORT_NAME = ViewProxy.class.getName().replace("akylas.totali.", "");
    private static final String 	THIS_LOGTAG           = THIS_CLASS_SHORT_NAME;
    private static final String     SCENARIO_NAME         = "/assets/Scenario/" + THIS_CLASS_SHORT_NAME + "/" + "project.dpd";
    
    
    protected String   getSampleScenarioName() { return SCENARIO_NAME; }
    protected String   getSampleLogTag() 	   { return THIS_LOGTAG;   }

    
	protected String getUsedTIRenderer() { return tiComponent.TI_RENDERER_GLES2; }
	
	protected String _scenarioPath = null;
    protected boolean _isInitializedCorrectly = false;
    protected boolean _isPlaying = false;
    protected boolean _needsStarting = false;
    protected boolean _readyToStart = false;
    protected tiComponent _tiComponent;
	protected FrameLayout _totaliFrameLayout = null;
//	TiUIView tiview;
	
	private HashMap<String, CommandHandler> _registeredCallbacks = new HashMap<String, CommandHandler>();

	private class TotaliView extends TiUIView
	{
		private static final String TAG = "AkylasTotaliView";
		
		private FrameLayout previewLayout;
		private TiCompositeLayout overlayLayout;

		public TotaliView(TiViewProxy proxy)
		{
			super(proxy);
			previewLayout = new FrameLayout(proxy.getActivity());
			if (_tiComponent != null)
				internalStop();
			_tiComponent = new tiComponent(proxy.getActivity());
			_tiComponent.setRendererType( getUsedTIRenderer() );
			
			int orient = proxy.getActivity().getResources().getConfiguration().orientation;
			if (orient != Configuration.ORIENTATION_PORTRAIT)
			{
		    	Log.e( getSampleLogTag(), "initComponent: tiComponent only supports portrait orientation. Screen will be black!!!");
			}			
		    _tiComponent.initialize(previewLayout);
		    overlayLayout = new TiCompositeLayout(proxy.getActivity(), proxy);
			previewLayout.addView(overlayLayout);
			setNativeView(previewLayout);
		}
		
		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}
	
	public ViewProxy()
	{
		super();
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] creating proxy ");
	}

	public ViewProxy(TiContext tiContext)
	{
		this();
//		CameraManager.init(tiContext.getActivity().getApplication());
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] creating proxy from context");
	}
	
	@Override
	public void setActivity(Activity activity)
	{
		super.setActivity(activity);
		((TiBaseActivity) activity).addOnLifecycleEventListener(this);
		((TiBaseActivity) activity).addConfigurationChangedListener(this);
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] set activity");
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] create view");
		TiUIView view = new TotaliView(this);
//		view.getLayoutParams().autoFillsHeight = true;
//		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
		
		if (options.containsKey("scenario")) {
			Log.d(LCAT, "totaliproxy created with scenario: " + options.get("scenario"));
			_scenarioPath = (String) options.get("scenario");
		}
	}
	
	@Override
	public void onStop(Activity activity) 
	{
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onStop");
		internalStop();	
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onStopped");
	}

	@Override
	public void onPause(Activity activity) 
	{
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onPause");
//		stopCapture();
		if (_tiComponent != null) {
			Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onPause component");
	    	if (!_tiComponent.isScenarioPaused())
	    	{
	    		_tiComponent.pauseScenario();
				Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] scenario paused");
	    	}
    		_tiComponent.onPause();
    	}
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onPaused");
	}
	
	@Override
	public void onStart(Activity arg0) {
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onStart");
		_needsStarting = true;
	}

	@Override
	public void onResume(Activity activity) 
	{		
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onResume");
		
		if (_tiComponent != null) {
			if (_needsStarting == true){
				_needsStarting = false;
				Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onResume _needsStarting");
				if (_scenarioPath != "") {
		        	loadScenario(_scenarioPath);
		        }
	    		_tiComponent.activateAutoFocusOnDownEvent(true);
			}
			Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onResume component");
	    	_tiComponent.onResume();
			Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onResume component resumed");
			
	    	if (_tiComponent.isScenarioPaused())
	    	{
		    	_tiComponent.playScenario();
	    		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] playScenario");
	    	}
		}
		
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] onResumed");
	}

	@Override
	public void onDestroy(Activity activity) 
	{
		internalStop();
//    	resetMembers(); // forced clean 
	}
	
//    public void initComponent()
//	{
//    	Log.d( getSampleLogTag(), "initComponent (" + THIS_CLASS_SHORT_NAME + ")" );
//    	Log.d( THIS_LOGTAG,       "initComponent" );	
//    	
//    	_isInitializedCorrectly = false;
//    	
//    	if (view == null)
//    	{
//	    	Log.e( getSampleLogTag(), "initComponent: cannot init component, as no view created");
//    		return;
//    	}
//    	_tiComponent = new tiComponent(getActivity());
//    	Log.d( getSampleLogTag(), _tiComponent.getVersion() );  
//    	
//		_tiComponent.setRendererType( getUsedTIRenderer() );
//				
//		int orient = getActivity().getResources().getConfiguration().orientation;
//		if (orient != Configuration.ORIENTATION_PORTRAIT)
//		{
//	    	Log.e( getSampleLogTag(), "initComponent: tiComponent only supports portrait orientation. Screen will be black!!!");
//		}
////		getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
//		
//		_totaliFrameLayout = new FrameLayout(getActivity());
//		_totaliFrameLayout.setBackgroundColor(Color.GREEN);
//	    _tiComponent.initialize(_totaliFrameLayout);
//    	
//    	TiCompositeLayout.LayoutParams params = view.getLayoutParams();
//		params.autoFillsHeight = true;
//		params.autoFillsWidth = true;
//    	((TiCompositeLayout) view.getNativeView()).addView(_totaliFrameLayout, new TiCompositeLayout.LayoutParams());
//		Log.d(LCAT, "initComponent done");
//    	_isInitializedCorrectly = true;
//	}
//	
//    public void postInitComponent()
//    {
//    	// override this if you need to do some special handling on the component after standard initialization
//    	
//    	Log.d( getSampleLogTag(), "postInitComponent (" + THIS_CLASS_SHORT_NAME + ")" );
//    	Log.d( THIS_LOGTAG,       "postInitComponent" );	    	
//    	if (_isInitializedCorrectly) {
//    	}
//    }

    public void loadScenario(String sourcefile)
	{
    	Log.d( LCAT, "loadScenario (" + sourcefile + ")" );
		
    	if (!new File(sourcefile).isAbsolute())
    	{        	
	    	ApplicationInfo appInfo = null;
	    	PackageManager packMgmr = getActivity().getPackageManager();
	    	try {
	    		appInfo = packMgmr.getApplicationInfo(getActivity().getPackageName(), 0);
	    	} catch (NameNotFoundException e) {
	    		e.printStackTrace();
	    		throw new RuntimeException("Unable to locate assets, aborting...");
	    	}
	    	sourcefile = appInfo.sourceDir + "/assets/Resources/" + sourcefile;
        	Log.d( LCAT,       "loadScenario: sourcefile:" + sourcefile);
    	}
    	

	    _tiComponent.loadScenario(sourcefile);
		_tiComponent.playScenario();
	    _isPlaying = true;
	}
//	// Methods
//	@Kroll.method
//	public void stop()
//	{
//		internalStop();
//	}

//	@Kroll.method
//	public void start()
//	{		
//        internalStart();
//	}
	
	
	private void internalStop()
	{
		Log.d(LCAT, "stop ticomponent");
    	if (_tiComponent != null)
    	{
    		Log.d(LCAT, "ticomponent needs stopping");
    		_tiComponent.terminate(); 
    		_tiComponent = null;
    	}
		Log.d(LCAT, "ticomponent stopped");
	}

	@Kroll.method
	public void registerCallback(String callback)
	{
		Log.d(LCAT, "registerCallback: " + callback);
		if (_tiComponent != null && !_registeredCallbacks.containsKey(callback)) 
		{
			Log.d(LCAT, "registering " + callback);
			CommandHandler handler = new CommandHandler(callback);
			_registeredCallbacks.put(callback, handler);
    		_tiComponent.registerCommunicationCallback(callback, handler, "execute");
    	}
	}
	
	@Kroll.method
	public void unregisterCallback(String callback)
	{
		if (_tiComponent != null && _registeredCallbacks.containsKey(callback)) 
		{
			_registeredCallbacks.remove(callback);
    	}
	}
	
	@Kroll.method
	public void enqueueCommand(String command, String[] args)
	{
		if (_tiComponent != null) 
		{
    		_tiComponent.enqueueCommand(command, args);
    	}
	}
	
	@Kroll.method
	public void focus()
	{
		if (_tiComponent != null) 
		{
    		_tiComponent.doCameraFocusNow();
    	}
	}

	@Override
	public void onConfigurationChanged(TiBaseActivity arg0, Configuration arg1) {
	}
}