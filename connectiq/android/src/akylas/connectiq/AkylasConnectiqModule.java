/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package akylas.connectiq;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;

import com.garmin.android.connectiq.ConnectIQ;
import com.garmin.android.connectiq.ConnectIQ.ConnectIQListener;
import com.garmin.android.connectiq.ConnectIQ.IQSdkErrorStatus;
import com.garmin.android.connectiq.exception.InvalidStateException;
import com.garmin.android.connectiq.exception.ServiceUnavailableException;

import com.garmin.android.connectiq.IQDevice;

import org.appcelerator.kroll.common.Log;

@Kroll.module(name = "AkylasConnectiq", id = "akylas.connectiq")
public class AkylasConnectiqModule extends KrollModule
        implements ConnectIQListener { 
    static ConnectIQ mConnectIQ = null;
    private boolean mSdkReady = false; 
    // private boolean registeredForDisconnect = false;
    private static final String LCAT = "ConnectiqModule";

    @Kroll.constant
    public static final int ERROR_INVALID_STATE = -1; 
    @Kroll.constant 
    public static final int ERROR_SERVICE_UNAVAILABLE = -2; 
    @Kroll.constant
    public static final int ERROR_APP_NOT_INSTALLED = -3;

    private static AkylasConnectiqModule sInstance = null;

    public static AkylasConnectiqModule getInstance() {
        return sInstance;
    }

    public static ConnectIQ getConnectIQ() {
        if (mConnectIQ == null) {
            mConnectIQ = ConnectIQ.getInstance(TiApplication.getAppContext(),
                    ConnectIQ.IQConnectType.WIRELESS);
        }
        return mConnectIQ;
    }
    // You can define constants with @Kroll.constant, for example:
    // @Kroll.constant public static final String EXTERNAL_NAME = value;

    public AkylasConnectiqModule() {
        super();
        sInstance = this;
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    public void onAppTerminate(TiApplication app) {
        try {
            mConnectIQ.unregisterAllForEvents();
            mConnectIQ.shutdown(app);
        } catch (InvalidStateException e) {
            // This is usually because the SDK was already shut down
            // so no worries.
        }
    }

    @Kroll.method
    public void initSDK(
            final @Kroll.argument(optional = true) KrollFunction callback) {
        if (mSdkReady) {
            callback.callAsync(getKrollObject(), (HashMap) null);
        } else {
            getConnectIQ().initialize(TiApplication.getAppContext(), true,
                    (callback != null) ? new ConnectIQListener() {

                        @Override
                        public void onSdkShutDown() {
                            AkylasConnectiqModule.this.onSdkShutDown();
                        }

                        @Override
                        public void onSdkReady() {
                            AkylasConnectiqModule.this.onSdkReady();
                            callback.callAsync(getKrollObject(), (HashMap) null);
                        }

                        @Override
                        public void onInitializeError(IQSdkErrorStatus err) {
                            AkylasConnectiqModule.this.onInitializeError(err);
                            KrollDict data = new KrollDict();
                            data.putCodeAndMessage(err.ordinal(), err.toString());
                            fireEvent(TiC.EVENT_ERROR, data, false, false);
                            KrollDict event = new KrollDict();
                            event.put(TiC.PROPERTY_ERROR, data);
                            callback.callAsync(getKrollObject(), event);
                        }
                    } : this);
        }
    }

    @Override
    public void onInitializeError(IQSdkErrorStatus error) {
        KrollDict data = new KrollDict();
        data.putCodeAndMessage(error.ordinal(), error.toString());
        fireEvent(TiC.EVENT_ERROR, data, false, false);
        mSdkReady = false;

    }

    @Override
    public void onSdkReady() {
        fireEvent("ready");
        mSdkReady = true;
    }

    @Override
    public void onSdkShutDown() {
        fireEvent("shutdown");
        mSdkReady = false;

    }

    public static KrollDict dictFromDevice(IQDevice device) {
        KrollDict data = new KrollDict();
        data.put("name", device.getFriendlyName());
        data.put("id", device.getDeviceIdentifier());
        data.put("status", device.getStatus());
        return data;
    }

    List<IQDevice> currentlyKnownDevices;

    @Kroll.method
    @Kroll.getProperty(enumerable = false)
    public Object getKnownDevices() {
        // Retrieve the list of known devices
        try {
            currentlyKnownDevices = getConnectIQ().getKnownDevices();
            List<KrollDict> result = new ArrayList<KrollDict>();

            if (currentlyKnownDevices != null) {
                for (IQDevice device : currentlyKnownDevices) {
                    result.add(dictFromDevice(device));
                }
                return result.toArray();
            }

        } catch (InvalidStateException e) {
            KrollDict data = new KrollDict();
            data.putCodeAndMessage(ERROR_INVALID_STATE, e.getMessage());
            fireEvent(TiC.EVENT_ERROR, data, false, false);
        } catch (ServiceUnavailableException e) {
            KrollDict data = new KrollDict();
            data.putCodeAndMessage(ERROR_SERVICE_UNAVAILABLE, e.getMessage());
            fireEvent(TiC.EVENT_ERROR, data, false, false);

        }
        return null;
    }

    public IQDevice getDevice(long identifier) {
        if (currentlyKnownDevices == null) {
            getKnownDevices();
        }
        if (currentlyKnownDevices != null) {
            for (IQDevice device : currentlyKnownDevices) {
//                long devideId = device.getDeviceIdentifier();
//                if (devideId == identifier) {
                    return device;
//                }
            }
        }
        return null;
    }

}
