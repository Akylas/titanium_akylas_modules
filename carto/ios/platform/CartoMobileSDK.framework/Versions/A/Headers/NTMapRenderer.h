/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#import "NTViewState.h"
#import "NTMapRendererListener.h"
#import "NTRendererCaptureListener.h"
#import "NTRedrawRequestListener.h"

/**
 * The map renderer component.
 */
__attribute__ ((visibility("default"))) @interface NTMapRenderer : NSObject
{
  void *swigCPtr;
  BOOL swigCMemOwn;
}
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Returns the map renderer listener. Can be null.<br>
 * @return The map renderer listener.
 */
-(NTMapRendererListener*)getMapRendererListener;
/**
 * Sets the map renderer listener.<br>
 * @param listener The new map renderer listener. Can be null.
 */
-(void)setMapRendererListener: (NTMapRendererListener*)listener;
/**
 * Returns the current view state.<br>
 * @return The current view state.
 */
-(NTViewState*)getViewState;
/**
 * Requests the renderer to refresh the view.<br>
 * Note that there is normally no need to do this manually,<br>
 * SDK automatically redraws the view when needed.
 */
-(void)requestRedraw;
/**
 * Captures map rendering as a bitmap. This operation is asynchronous and the result is returned via listener callback.<br>
 * @param listener The listener interface that will receive the callback once rendering is available.<br>
 * @param waitWhileUpdating If true, delay the capture until all asynchronous processes are finished (for example, until all tiles are loaded).
 */
-(void)captureRendering: (NTRendererCaptureListener*)listener waitWhileUpdating: (BOOL)waitWhileUpdating;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

