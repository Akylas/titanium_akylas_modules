/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package akylas.shapes;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiUIHelper;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutParams;

import akylas.shapes.ShapeProxy.PRoundRect;
import android.app.Activity;
import android.app.NativeActivity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.shapes.Shape;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.widget.LinearLayout;

// This proxy can be created by calling Android.createExample({message: "hello world"})
@SuppressWarnings({ "unused", "unchecked", "rawtypes" })
@Kroll.proxy(name = "View", creatableInModule = AkylasShapesModule.class, propertyAccessors = {})
public class ShapeViewProxy extends TiViewProxy {
	// Standard Debugging variables
	private static final String TAG = "ShapeViewProxy";

	public static final List<String> supportedEvents = Arrays.asList(
			TiC.EVENT_CLICK, TiC.EVENT_DOUBLE_CLICK, TiC.EVENT_DOUBLE_TAP,
			TiC.EVENT_SINGLE_TAP, TiC.EVENT_LONGPRESS, TiC.EVENT_TOUCH_CANCEL, TiC.EVENT_TOUCH_END,
			TiC.EVENT_TOUCH_MOVE, TiC.EVENT_TOUCH_START);

	protected class TiShapeView extends TiUIView {
		private Rect nativeViewBounds;

		protected void onLayoutChanged(int left, int top, int right, int bottom) {
			nativeViewBounds.set(0, 0, right - left, bottom - top);
			update();
			redrawNativeView();
		}

		public void update() {
		    KrollProxy[] children = ShapeViewProxy.this.getChildren();
			for (int i = 0; i < children.length; i++) {
                KrollProxy childProxy = children[i];
                if (childProxy instanceof ShapeProxy) {
                    ((ShapeProxy) childProxy).onLayoutChanged(nativeView.getContext(),
                            nativeViewBounds);
                }
            }
		}

		public TiShapeView(final TiViewProxy proxy, Activity activity) {
			super(proxy);
			layoutParams.sizeOrFillWidthEnabled = true;
			layoutParams.sizeOrFillHeightEnabled = true;
			layoutParams.autoFillsHeight = true;
			layoutParams.autoFillsWidth = true;
			nativeViewBounds = new Rect();
			setNativeView(new TiCompositeLayout(activity, LayoutArrangement.DEFAULT, this) {
                
                @Override
                public void setView(TiUIView view) {
                    setWillNotDraw(false); // or we wont draw if we dont have a
                    // background
                    super.setView(view);
                    
                }

                @Override
                protected void onDraw(Canvas canvas) {
                    super.onDraw(canvas);
                    KrollProxy[] children = ShapeViewProxy.this.getChildren();
                    for (int i = 0; i < children.length; i++) {
                        KrollProxy childProxy = children[i];
                        if (childProxy instanceof ShapeProxy) {
                            ((ShapeProxy) childProxy).drawOnCanvas(canvas);
                        }
                    }
                }
                @Override
                protected void onLayout(boolean changed, int left, int top,
                        int right, int bottom) {
                    super.onLayout(changed, left, top, right, bottom);
                    if (changed) {
                        onLayoutChanged(left, top, right, bottom);
                    }
                }
            });
//            disableHWAcceleration();
		}

		@Override
		public void processProperties(HashMap d) {

			super.processProperties(d);
			if (d.containsKey(AkylasShapesModule.PROPERTY_SHAPES)) {
	            ShapeViewProxy.this.add(d.get(AkylasShapesModule.PROPERTY_SHAPES), null);
	        }
			redrawNativeView();
		}
		
		public void redrawNativeView() {
	        super.redrawNativeView();
	    }

		@Override
		public void release() {
			super.release();
			nativeView = null;
		}
	}

	// Constructor
	public ShapeViewProxy() {
		super();
	}
	
	@Override
    public boolean hasListeners(String eventName, boolean checkParent) {
        boolean handledByChildren = false;
        if (supportedEvents.contains(eventName) &&  children != null && children.size() > 0) {
            KrollProxy[] children = ShapeViewProxy.this.getChildren();
            for (int i = 0; i < children.length; i++) {
                KrollProxy childProxy = children[i];
                if (childProxy instanceof ShapeProxy) {
                    handledByChildren |= ((ShapeProxy) childProxy).hasListeners(eventName, false);

                }
            }
        }
        return handledByChildren || super.hasListeners(eventName, checkParent);
    }
	private boolean canFire = true;
	@Override
	public boolean fireEvent(String eventName, Object data, boolean bubbles,
            boolean checkListeners) {
		if (canFire && supportedEvents.contains(eventName) &&  children != null && children.size() > 0) {
		    canFire = false;
			int x = -1;
			int y = -1;
			if (data instanceof HashMap) {
	            double density = TiApplication.getAppDensity();
				x = (int) (TiConvert.toInt((HashMap)data, TiC.PROPERTY_X) * density);
				y = (int) (TiConvert.toInt((HashMap)data, TiC.PROPERTY_Y) * density);
			}
			boolean handledByChildren = false;
			boolean result = false;
			KrollProxy[] children = ShapeViewProxy.this.getChildren();
            for (int i = 0; i < children.length; i++) {
                KrollProxy childProxy = children[i];
                if (childProxy instanceof ShapeProxy) {
                    handledByChildren |= ((ShapeProxy) childProxy).handleTouchEvent(eventName, data, bubbles, checkListeners, x, y);

                }
			}
			if (handledByChildren && bubbles) {
				return true;
			}
		}
        canFire = true;
		return super.fireEvent(eventName, data, bubbles, checkListeners);
	}

	@Override
	public TiUIView createView(Activity activity) {
		return new TiShapeView(this, activity);
	}


	@Kroll.method
	public void redraw() {
		if (view != null) {
			((TiShapeView) view).redrawNativeView();
		}
	}

	@Kroll.method
	public void update() {
		if (view != null) {
			((TiShapeView) view).update();
			((TiShapeView) view).redrawNativeView();
		}
	}

	private void addShape(ShapeProxy proxy) {
		proxy.setShapeViewProxy(this);
		redraw();
	}

	private void removeShape(ShapeProxy proxy) {
		proxy.recursiveCancelAllAnimations();
		proxy.setShapeViewProxy(null);
		redraw();
	}

	@Override
    protected void handleChildAdded(KrollProxy object, final int index) {
        if (!(object instanceof ShapeProxy)) {
            super.handleChildAdded(object, index);
            return;
        }
        ShapeProxy proxy = (ShapeProxy) object;
        addShape(proxy);
    }
    
    @Override
    protected void handleChildRemoved(KrollProxy object, final boolean shouldDetach) {
        if (!(object instanceof ShapeProxy)) {
            super.handleChildRemoved(object, shouldDetach);
            return;
        }
        ShapeProxy proxy = (ShapeProxy) object;
        removeShape(proxy);
    }
}