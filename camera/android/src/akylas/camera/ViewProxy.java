/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package akylas.camera;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.TiBaseActivity.ConfigurationChangedListener;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.TiContext;
//import org.appcelerator.titanium.TiPoint;
import org.appcelerator.titanium.TiLifecycle.OnLifecycleEvent;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiUIView;

import akylas.camera.cameramanager.CameraManager;
import android.app.Activity;
import android.content.res.Configuration;
import android.hardware.Camera.CameraInfo;
import android.os.Handler;


// This proxy can be created by calling AkylasCameraAndroid.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=AkylasCameraAndroidModule.class)
public class ViewProxy extends TiViewProxy implements  OnLifecycleEvent, ConfigurationChangedListener 
{
	// Standard Debugging variables
	private static final String LCAT = "AkylasCameraViewProxy";
	

	// Constructor
	private CaptureActivityHandler mHandler;
	/**
	 * @return current handler
	 */
	public Handler getHandler() {
		return mHandler;
	}
	
	@Kroll.constant
	public static final int BACK_CAMERA = CameraInfo.CAMERA_FACING_BACK;
	@Kroll.constant
	public static final int FRONT_CAMERA = CameraInfo.CAMERA_FACING_FRONT;
	private int cameraPosition = BACK_CAMERA;
	
	public ViewProxy()
	{
		super();
//		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] creating proxy ");
	}

	public ViewProxy(TiContext tiContext)
	{
		this();
		CameraManager.init(tiContext.getActivity().getApplication());
//		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] creating proxy from context");
	}
	
	private int cameraPositionValue(Object value)
	{
		int result = BACK_CAMERA;
		String sValue = TiConvert.toString(value);
		if (sValue != null)
		{
			if (value == "front")
				result = FRONT_CAMERA;
			else if (value == "rear")
				result = BACK_CAMERA;
		}
		else
		{
			int iValue = TiConvert.toInt(value);
			if (iValue ==FRONT_CAMERA || iValue == BACK_CAMERA)
				result = iValue;
		}
		return result;
	}
	
	@Override
	public void setActivity(Activity activity)
	{
		super.setActivity(activity);
//		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] set activity");
		if (activity instanceof TiBaseActivity) {
			((TiBaseActivity) activity).addOnLifecycleEventListener(this);
		}
		
		TiBaseActivity.registerOrientationListener (new TiBaseActivity.OrientationChangedListener()
		{
			@Override
			public void onOrientationChanged (int configOrientationMode)
			{
				Log.d(LCAT, "onOrientationChanged");
				
				CameraManager.get().updateCameraDisplayOrientation();
			}
		});
		Log.d(LCAT, "[PROXY CONTEXT LIFECYCLE EVENT] set activity");
		
		CameraManager.get().setActivity(activity);
		
		if (mHandler == null) {
			mHandler = new CaptureActivityHandler(this);
		}
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new CameraView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
		
		if (options.containsKey("message")) {
			Log.d(LCAT, "example created with message: " + options.get("message"));
		}
	}

	@Override
	public void onDestroy(Activity arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onPause(Activity arg0) {
		if (view != null)
			((CameraView)view).stopPreview();
	}

	@Override
	public void onResume(Activity arg0) {
		if (view != null)
			((CameraView)view).startPreview();
		
	}

	@Override
	public void onStart(Activity activity) {
		
	}

	@Override
	public void onStop(Activity arg0) {
		// TODO Auto-generated method stub
		
	}

	@Kroll.method
	public void stop()
	{
		Log.d(LCAT, "stop");
		if (view != null)
			((CameraView)view).stopPreview();
	}

	@Kroll.method
	public void start()
	{
		Log.d(LCAT, "start");
		if (view != null)
			((CameraView)view).startPreview();
	}
	
	@Kroll.method
	public Boolean isStarted()
	{
		if (view != null)
			return ((CameraView)view).isPreviewStarted();
		else return false;
	}
	
	@Kroll.method
	public void swapCamera()
	{
		if (cameraPosition == BACK_CAMERA)
		{
			cameraPosition = FRONT_CAMERA;
		}
		else
		{
			cameraPosition = BACK_CAMERA;
		}
		if (view != null) {
			((CameraView)view).setCamera(cameraPosition);
		}

	}

	@Kroll.method
	public void focus()
	{
		if (mHandler != null) {
			mHandler.requestFocus();
		}
	}
	
	@Kroll.method
	public void autoFocus()
	{
		if (mHandler != null) {
			mHandler.requestAutoFocus();
		}
	}
	
	// Properties
	
	@Kroll.setProperty @Kroll.method
	public void setCameraPosition(Object value)
	{
		int pos = cameraPositionValue(value);
		if (view != null) {
			((CameraView)view).setCamera(pos);
		}
	}

	@Kroll.setProperty @Kroll.method
	public void setTorch(Boolean value)
	{
//	    Log.d(LCAT, "setTorch3 to: " + value);
	    CameraManager.get().setTorch(value);
	    KrollDict data = new KrollDict();
        data.put("on", CameraManager.get().getTorch());
        fireEvent("torch", data);
	}
	
	@Kroll.getProperty @Kroll.method
	public Boolean getTorch()
	{
	    return CameraManager.get().getTorch();
	}

	@Override
	public void onConfigurationChanged(TiBaseActivity arg0, Configuration arg1) {
		Log.d(LCAT, "onConfigurationChanged");
		
		CameraManager.get().updateCameraDisplayOrientation();
	}
	
}