/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * Built-in Carto basemap styles.
 */
typedef NS_ENUM(NSInteger, NTCartoBaseMapStyle) {
/**
 * The default (bright) style.
 */
  NT_CARTO_BASEMAP_STYLE_DEFAULT,
/**
 * The dark style.
 */
  NT_CARTO_BASEMAP_STYLE_DARK,
/**
 * The gray style.
 */
  NT_CARTO_BASEMAP_STYLE_GRAY
};


#import "NTTileDataSource.h"
#import "NTVectorTileLayer.h"
#import "NTAssetPackage.h"

/**
 * Specialized vector tile layer that can use built-in vector tile styles.
 */
__attribute__ ((visibility("default"))) @interface NTCartoVectorTileLayer : NTVectorTileLayer
-(void*)getCptr;
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
+(NTCartoVectorTileLayer*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a CartoVectorTileLayer object from a specificed base map style.<br>
 * @param dataSource The data source from which this layer loads data.<br>
 * @param style The style to use for the layer.
 */
-(id)initWithDataSource: (NTTileDataSource*)dataSource style: (enum NTCartoBaseMapStyle)style;
/**
 * Constructs a CartoVectorTileLayer object from a source name and style asset package.<br>
 * Style asset package defines visual style of the map and must be compatible with the source.<br>
 * @param dataSource The data source from which this layer loads data.<br>
 * @param styleAssetPackage The style asset package (usually a zipped file or an asset)
 */
-(id)initWithDataSource: (NTTileDataSource*)dataSource styleAssetPackage: (NTAssetPackage*)styleAssetPackage;
/**
 * Returns the current language used for the layer.<br>
 * @return The current language. If the returned string is empty, then 'local' languages are used.
 */
-(NSString*)getLanguage;
/**
 * Sets the current map language. The list of supported languages contains: en, de, es, it, fr, ru, zh, et.<br>
 * @param lang The new language to use. The default is local language (empty string).
 */
-(void)setLanguage: (NSString*)lang;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.<br>
 * @return The class name of this object.
 */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.<br>
 * @return The pointer to the connected director object or null if director is not connected.
 */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

